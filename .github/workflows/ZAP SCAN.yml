name: OWASP ZAP Baseline Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan Web Application
    steps:
      # Clona el repositorio
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      # Inicia el contenedor desde Docker Hub
      - name: Run Application Container
        run: |
          docker run -d --name webapp -p 8080:80 tu-usuario/tu-imagen:tag
          sleep 10 # Espera a que el contenedor esté listo
          env:
          # Opcional: Añade variables de entorno si tu contenedor las necesita
          # ENV_VAR_NAME: ${{ secrets.ENV_VAR_NAME }}

      # Verifica que el contenedor esté corriendo
      - name: Check Container
        run: |
          docker ps
          curl -I http://localhost:8080 || echo "Warning: Could not connect to webapp"

      # Ejecuta el escaneo baseline de ZAP
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://localhost:8080' # Apunta al contenedor local
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          issue_title: 'ZAP Baseline Scan Report'
          fail_action: false
          allow_issue_writing: true
          artifact_name: 'zap_scan'

      # Sube el reporte como artefacto
      - name: Upload ZAP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_out.json

      # Opcional: Detiene el contenedor
      - name: Stop Container
        if: always()
        run: |
          docker stop webapp
          docker rm webapp
